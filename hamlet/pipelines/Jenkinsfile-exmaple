#!groovy

// Build Pipeline for cognito IDP lambda function
// The build should be run once per environment to generate new keys on deployment

pipeline {

    agent {
        label 'hamlet-latest'
    }

    options {
        skipDefaultCheckout()
    }

    parameters {
        choice(
            name: 'environment',
            choices: [ '<your environment names from your cmdb>' ]
        )
    }

    environment {
        product_cmdb = '<product CMDB repo url>'
        properties_file = '<product pipeline properties file>'

        // Update to align with the credentials for your CMDB
        GITHUB_CREDENTIALS = credentials('github')

        ENVIRONMENT = "${params['environment']}"

        // The git ref for the github-idp code
        githubidp_ref = 'v1.0.0'
    }

    stages {

        stage('build-github-idp') {
            environment {
                BUILD_PATH = 'github-idp'
                BUILD_SRC_DIR = ''

                deployment_unit = "github-lambda"
                image_format = "lambda"
            }

            steps {
                dir('github-idp') {

                    script {
                        github_idp_repo = git credentialsId: 'github', url: 'https://github.com/gs-gs/github-idp', poll: false, ref: 'githubidp_ref'
                        env["GITHUB_IDP_GIT_COMMIT"] = github_idp_repo.GIT_COMMIT
                    }

                    sh '''#!/bin/bash
                    npm ci
                    npm run test
                    npx sls package

                    mkdir src/dist
                    mv .serverless/github-cognito-openid-wrapper.zip src/dist/lambda.zip
                    '''

                    archiveArtifacts artifacts: "src/dist/lambda.zip", fingerprint: true
                    uploadImageToRegistry("${env.properties_file}", "${env.deployment_unit}", "${env.image_format}", "${env.GITHUB_IDP_GIT_COMMIT}")
                }
            }

        }
    }
}



void uploadImageToRegistry( properties_file, deployment_unit, image_format, git_commit )   {

    script {
        env['DEPLOYMENT_UNITS'] = "${deployment_unit}"
        env['IMAGE_FORMATS'] = "${image_format}"
        env['GIT_COMMIT'] = "${git_commit}"
    }

    // Product Setup
    script {
        def propertiesContent = readTrusted "${env["properties_file"]}"
        def productProperties = readProperties interpolate: true, text: "${propertiesContent}";
        productProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
        ${AUTOMATION_BASE_DIR}/setContext.sh
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
        ${AUTOMATION_DIR}/constructTree.sh
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
        ${AUTOMATION_DIR}/manageImages.sh -g "${GIT_COMMIT}" -u "${DEPLOYMENT_UNITS}" -f "${IMAGE_FORMATS}"  || exit $?
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
        ${AUTOMATION_DIR}/validateUpdateBuildReferencesParameters.sh
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
        ${AUTOMATION_DIR}/confirmBuilds.sh
    '''

    script {
        def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
        contextProperties.each{ k, v -> env["${k}"] ="${v}" }
    }

    sh '''#!/bin/bash
        ${AUTOMATION_DIR}/updateBuildReferences.sh
    '''
}
